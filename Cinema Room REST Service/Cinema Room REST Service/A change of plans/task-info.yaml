type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    public class Seat {
        private int row;
        private int column;
        private int price;

        public Seat() {
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/controller/Controller.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.Seat;
    import cinema.model.Seats;
    import cinema.model.SeatsResponse;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.ArrayList;

    @RestController
    public class Controller {

        @Autowired
        private Seats seats;

        @GetMapping("/seats")
        SeatsResponse getSeats() {

            int i = 0;

            SeatsResponse seatsResponse = new SeatsResponse();

            seatsResponse.setTotal_rows(seats.getTotal_rows());
            seatsResponse.setTotal_columns(seats.getTotal_columns());
            seatsResponse.setAvailable_seats(new ArrayList<>());

            for (Seat s : seats.getAvailable_seats()) {

                if (seats.getAvailability().get(i)) {
                    seatsResponse.getAvailable_seats().add(s);
                }

                i++;
            }

            return seatsResponse;
        }

        @PostMapping("/purchase")
        Seat someMethod(@RequestBody Seat seat) throws Exception {

            if (seat.getRow() > 9 || seat.getRow() < 1 || seat.getColumn() > 9 || seat.getColumn() < 1) {
                throw new Exception("The number of a row or a column is out of bounds!");
            }

            String index = String.valueOf(seat.getRow()) + (seat.getColumn());


            if (!seats.getAvailability().get(seats.getIndex().get(index))) {
                throw new Exception("The ticket has been already purchased!");
            }

            //set ticket as purchased
            seats.getAvailability().set(seats.getIndex().get(index), false);

        return seats.getAvailable_seats().get(seats.getIndex().get(index));
        }
    }
  learner_created: true
- name: src/cinema/exceptionhandling/ExceptionResponse.java
  visible: true
  text: |
    package cinema.exceptionhandling;

    public class ExceptionResponse {

        private String error;

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/model/SeatsResponse.java
  visible: true
  text: |
    package cinema.model;

    import java.util.List;

    public class SeatsResponse {

        private int total_rows;
        private int total_columns;

        private List<Seat> available_seats;

        public SeatsResponse() {
        }

        public SeatsResponse(int total_rows, int total_columns, List<Seat> available_seats) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = available_seats;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }
    }
  learner_created: true
- name: src/cinema/model/Seats.java
  visible: true
  text: |
    package cinema.model;

    import org.springframework.stereotype.Component;

    import java.util.ArrayList;
    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;

    @Component
    public class Seats {

        private int total_rows;
        private int total_columns;

        private List<Seat> available_seats;
        private List<Boolean> availability;
        private Map<String, Integer> index;

        public Seats() {
            this.total_rows = 9;
            this.total_columns = 9;

            List<Seat> seats = new ArrayList<>();
            List<Boolean> availability = new ArrayList<>();
            Map<String, Integer> index = new HashMap<>();

            for (int i = 0; i < total_rows; i++) {

                for (int j = 0; j < total_columns; j++) {

                    int price;

                    String sb = String.valueOf(i + 1) + (j + 1);
                    price = i + 1 <= 4 ? 10 : 8;
                    seats.add(new Seat(i + 1, j + 1, price));
                    index.put(sb, seats.size() - 1);
                    availability.add(true);
                }
            }

            this.available_seats = seats;
            this.index = index;
            this.availability = availability;
        }

        public Seats(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;

            List<Seat> seats = new ArrayList<>();
            List<Boolean> availability = new ArrayList<>();
            Map<String, Integer> index = new HashMap<>();

            for (int i = 0; i < total_rows; i++) {

                for (int j = 0; j < total_columns; j++) {

                    int price;

                    String sb = String.valueOf(i + 1) + (j + 1);
                    price = i + 1 <= 4 ? 10 : 8;
                    seats.add(new Seat(i + 1, j + 1, price));
                    index.put(sb, seats.size() - 1);
                    availability.add(true);
                }
            }

            this.available_seats = seats;
            this.index = index;
            this.availability = availability;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }

        public List<Boolean> getAvailability() {
            return availability;
        }

        public void setAvailability(List<Boolean> availability) {
            this.availability = availability;
        }

        public Map<String, Integer> getIndex() {
            return index;
        }

        public void setIndex(Map<String, Integer> index) {
            this.index = index;
        }
    }
  learner_created: true
- name: src/cinema/exceptionhandling/ExceptionHandlerControllerAdvice.java
  visible: true
  text: |-
    package cinema.exceptionhandling;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.bind.annotation.ResponseStatus;

    import javax.servlet.http.HttpServletRequest;

    @ControllerAdvice
    public class ExceptionHandlerControllerAdvice {

        @ExceptionHandler(Exception.class)
        @ResponseStatus(value = HttpStatus.BAD_REQUEST)
        public @ResponseBody ExceptionResponse handleException(final Exception exception,
                                                               final HttpServletRequest request) {

            ExceptionResponse error = new ExceptionResponse();
            error.setError(exception.getMessage());
            return error;
        }

    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/model/ReturnTicket.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 04 Jul 2022 20:37:12 UTC
record: 3
