type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n\n        buyFillTake();\n\n\
    \    }\n\n    public static void buyFillTake() {\n\n        Supplies supplies\
    \ = new Supplies(400, 540, 120, 9, 550);\n\n        showSupply(supplies);\n  \
    \      action(supplies);\n        showSupply(supplies);\n    }\n\n    public static\
    \ void showSupply(Supplies supplies) {\n\n        System.out.printf(\"The coffee\
    \ machine has:%n\" +\n                \"%d ml of water%n\" +\n               \
    \ \"%d ml of milk%n\" +\n                \"%d g of coffee beans%n\" +\n      \
    \          \"%d disposable cups%n\" +\n                \"$%d of money%n%n\",\n\
    \                supplies.getWater(), supplies.getMilk(), supplies.getBeans(),\
    \ supplies.getCups(), supplies.getMoney());\n    }\n\n    public static void action(Supplies\
    \ supplies) {\n\n        Scanner scanner = new Scanner(System.in);\n        String\
    \ action = \"\";\n\n        try {\n            System.out.println(\"Write action\
    \ (buy, fill, take):\");\n            action = scanner.nextLine();\n        }\
    \ catch (Exception e) {\n            e.printStackTrace();\n        }\n\n     \
    \   switch (action.toLowerCase()) {\n\n            case \"buy\" : {\n        \
    \        buy(scanner, supplies);\n                break;\n            }\n    \
    \        case \"fill\" : {\n                fill(scanner, supplies);\n       \
    \         break;\n            }\n            case \"take\" : {\n             \
    \   take(supplies);\n                break;\n            }\n        }\n    }\n\
    \n    public static void buy(Scanner scanner, Supplies supplies) {\n        try\
    \ {\n            int bOption = -1;\n            System.out.println(\"What do you\
    \ want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\");\n            bOption\
    \ = scanner.nextInt();\n\n            //todo? input validation\n            \n\
    \            supplies.setCups(supplies.getCups() - 1);\n\n            switch (bOption)\
    \ {\n\n                case 1: {\n                    supplies.setWater(supplies.getWater()\
    \ - 250);\n                    supplies.setBeans(supplies.getBeans() - 16);\n\
    \                    supplies.setMoney(supplies.getMoney() + 4);\n           \
    \         break;\n                }\n\n                case 2: {\n           \
    \         supplies.setWater(supplies.getWater() - 350);\n                    supplies.setMilk(supplies.getMilk()\
    \ - 75);\n                    supplies.setBeans(supplies.getBeans() - 20);\n \
    \                   supplies.setMoney(supplies.getMoney() + 7);\n            \
    \        break;\n                }\n\n                case 3: {\n            \
    \        supplies.setWater(supplies.getWater() - 200);\n                    supplies.setMilk(supplies.getMilk()\
    \ - 100);\n                    supplies.setBeans(supplies.getBeans() - 12);\n\
    \                    supplies.setMoney(supplies.getMoney() + 6);\n           \
    \         break;\n                }\n\n                default: {\n          \
    \          break;\n                }\n            }\n        } catch (Exception\
    \ e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static\
    \ void fill(Scanner scanner, Supplies supplies) {\n\n        int input;\n\n  \
    \      try {\n            System.out.println(\"Write how many ml of water you\
    \ want to add:\");\n            input = scanner.nextInt();\n            supplies.setWater(supplies.getWater()\
    \ + input);\n            System.out.println(\"Write how many ml of milk you want\
    \ to add:\");\n            input = scanner.nextInt();\n            supplies.setMilk(supplies.getMilk()\
    \ + input);\n            System.out.println(\"Write how many grams of coffee beans\
    \ you want to add:\");\n            input = scanner.nextInt();\n            supplies.setBeans(supplies.getBeans()\
    \ + input);\n            System.out.println(\"Write how many disposable cups of\
    \ coffee you want to add:\");\n            input = scanner.nextInt();\n      \
    \      supplies.setCups(supplies.getCups() + input);\n        } catch (Exception\
    \ e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static\
    \ void take(Supplies supplies) {\n        System.out.printf(\"I gave you %d%n%n\"\
    , supplies.getMoney());\n        supplies.setMoney(0);\n    }\n\n    public static\
    \ void stage3() {\n\n        int water = -1;\n        int milk = -1;\n       \
    \ int beans = -1;\n        int cups = -1;\n        int wCount = 0;\n        int\
    \ mCount = 0;\n        int bCount = 0;\n        int cCount = 0;\n\n        Scanner\
    \ scanner = new Scanner(System.in);\n//        System.out.println(\"Starting to\
    \ make a coffee\\nGrinding coffee beans\\nBoiling water\\nMixing boiled water\
    \ with crushed coffee beans\\nPouring coffee into the cup\\nPouring some milk\
    \ into the cup\\nCoffee is ready!\");\n//        System.out.println(\"Write how\
    \ many cups of coffee you will need: \");\n//        cups = scanner.nextInt();\n\
    //        System.out.printf(\"For %d cups of coffee you will need:%n\" +\n// \
    \               \"%d ml of water%n\" +\n//                \"%d ml of milk%n\"\
    \ +\n//                \"%d g of coffee beans%n\", cups, cups * 200, cups * 50,\
    \ cups * 15);\n\n        try {\n            System.out.println(\"Write how many\
    \ ml of water the coffee machine has:\");\n            water = scanner.nextInt();\n\
    \            System.out.println(\"Write how many ml of milk the coffee machine\
    \ has:\");\n            milk = scanner.nextInt();\n            System.out.println(\"\
    Write how many grams of coffee beans the coffee machine has:\");\n           \
    \ beans = scanner.nextInt();\n            System.out.println(\"Write how many\
    \ cups of coffee you will need:\");\n            cups = scanner.nextInt();\n\n\
    \            wCount = water / 200;\n            mCount = milk / 50;\n        \
    \    bCount = beans / 15;\n\n            cCount = wCount;\n            if (mCount\
    \ < wCount) {\n                cCount = mCount;\n            } else if (bCount\
    \ < mCount) {\n                cCount = bCount;\n            }\n\n           \
    \ if (cCount == cups) {\n                System.out.println(\"Yes, I can make\
    \ that amount of coffee\");\n            } else if (cCount < cups){\n        \
    \        System.out.printf(\"No, I can only make %d cup(s) of coffee%n\", cCount);\n\
    \            } else if (cCount > cups) {\n                System.out.printf(\"\
    Yes, I can make that amount of coffee (and even %d more than that)%n\", cCount\
    \ - cups);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n\
    \        }\n    }\n    \n    public static class Supplies {\n        private int\
    \ water = 400;\n        private int milk = 540;\n        private int beans = 120;\n\
    \        private int cups = 9;\n        private int money = 550;\n\n        public\
    \ Supplies() {\n        }\n\n        public Supplies(int water, int milk, int\
    \ beans, int cups, int money) {\n            this.water = water;\n           \
    \ this.milk = milk;\n            this.beans = beans;\n            this.cups =\
    \ cups;\n            this.money = money;\n        }\n\n        public int getWater()\
    \ {\n            return water;\n        }\n\n        public void setWater(int\
    \ water) {\n            this.water = water;\n        }\n\n        public int getMilk()\
    \ {\n            return milk;\n        }\n\n        public void setMilk(int milk)\
    \ {\n            this.milk = milk;\n        }\n\n        public int getBeans()\
    \ {\n            return beans;\n        }\n\n        public void setBeans(int\
    \ beans) {\n            this.beans = beans;\n        }\n\n        public int getCups()\
    \ {\n            return cups;\n        }\n\n        public void setCups(int cups)\
    \ {\n            this.cups = cups;\n        }\n\n        public int getMoney()\
    \ {\n            return money;\n        }\n\n        public void setMoney(int\
    \ money) {\n            this.money = money;\n        }\n\n        @Override\n\
    \        public String toString() {\n            return \"Supplies{\" +\n    \
    \                \"water=\" + water +\n                    \", milk=\" + milk\
    \ +\n                    \", beans=\" + beans +\n                    \", cups=\"\
    \ + cups +\n                    \", money=\" + money +\n                    '}';\n\
    \        }\n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
record: 4
