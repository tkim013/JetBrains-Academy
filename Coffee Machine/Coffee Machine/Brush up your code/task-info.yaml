type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        public static void main(String[] args) {

            String action = "";
            Scanner scanner = new Scanner(System.in);
            Supplies supplies = new Supplies(400, 540, 120, 9, 550);

            while (true) {
                System.out.println("Write action (buy, fill, take, remaining, exit):");
                action = scanner.nextLine();
                action = action.toLowerCase();
                if(action.equals("exit")) {
                    break;
                }

                switch (action) {

                    case "buy" : {
                        buy(scanner, supplies);
                        break;
                    }

                    case "fill" : {
                        fill(scanner, supplies);
                        break;
                    }

                    case "take" : {
                        take(supplies);
                        break;
                    }

                    case "remaining" : {
                        showSupply(supplies);
                        break;
                    }
                }
            }

        }

        public static void buyFillTake() {

            Supplies supplies = new Supplies(400, 540, 120, 9, 550);

            showSupply(supplies);
            action(supplies);
            showSupply(supplies);
        }

        public static void showSupply(Supplies supplies) {

            System.out.printf("The coffee machine has:%n" +
                    "%d ml of water%n" +
                    "%d ml of milk%n" +
                    "%d g of coffee beans%n" +
                    "%d disposable cups%n" +
                    "$%d of money%n%n",
                    supplies.getWater(), supplies.getMilk(), supplies.getBeans(), supplies.getCups(), supplies.getMoney());
        }

        public static void action(Supplies supplies) {

            Scanner scanner = new Scanner(System.in);
            String action = "";

            try {
                System.out.println("Write action (buy, fill, take):");
                action = scanner.nextLine();
            } catch (Exception e) {
                e.printStackTrace();
            }

            switch (action.toLowerCase()) {

                case "buy" : {
                    buy(scanner, supplies);
                    break;
                }
                case "fill" : {
                    fill(scanner, supplies);
                    break;
                }
                case "take" : {
                    take(supplies);
                    break;
                }
            }
        }

        public static void buy(Scanner scanner, Supplies supplies) {
            try {
                String bOption = "";
                System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:");
                bOption = scanner.nextLine();
                bOption = bOption.toLowerCase();
                //todo? input validation

                switch (bOption) {

                    case "1" : {

                        if (supplies.getWater() - 250 < 0) {
                            System.out.println("Sorry, not enough water!");
                            break;
                        }

                        if (supplies.getBeans() - 16 < 0) {
                            System.out.println("Sorry, not enough beans!");
                            break;
                        }

                        System.out.println("I have enough resources, making you a coffee!");
                        supplies.setWater(supplies.getWater() - 250);
                        supplies.setBeans(supplies.getBeans() - 16);
                        supplies.setMoney(supplies.getMoney() + 4);
                        supplies.setCups(supplies.getCups() - 1);
                        break;
                    }

                    case "2" : {

                        if (supplies.getWater() - 350 < 0) {
                            System.out.println("Sorry, not enough water!");
                            break;
                        }

                        if (supplies.getMilk() - 75 < 0) {
                            System.out.println("Sorry, not enough beans!");
                            break;
                        }

                        if (supplies.getBeans() - 20 < 0) {
                            System.out.println("Sorry, not enough beans!");
                            break;
                        }

                        supplies.setWater(supplies.getWater() - 350);
                        supplies.setMilk(supplies.getMilk() - 75);
                        supplies.setBeans(supplies.getBeans() - 20);
                        supplies.setMoney(supplies.getMoney() + 7);
                        supplies.setCups(supplies.getCups() - 1);
                        break;
                    }

                    case "3" : {

                        if (supplies.getWater() - 200 < 0) {
                            System.out.println("Sorry, not enough water!");
                            break;
                        }

                        if (supplies.getMilk() - 100 < 0) {
                            System.out.println("Sorry, not enough beans!");
                            break;
                        }

                        if (supplies.getBeans() - 12 < 0) {
                            System.out.println("Sorry, not enough beans!");
                            break;
                        }

                        supplies.setWater(supplies.getWater() - 200);
                        supplies.setMilk(supplies.getMilk() - 100);
                        supplies.setBeans(supplies.getBeans() - 12);
                        supplies.setMoney(supplies.getMoney() + 6);
                        supplies.setCups(supplies.getCups() - 1);
                        break;
                    }

    //                case "back" : {
    //                    break;
    //                }

                    default: {
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public static void fill(Scanner scanner, Supplies supplies) {

            int input;

            try {
                System.out.println("Write how many ml of water you want to add:");
                input = scanner.nextInt();
                supplies.setWater(supplies.getWater() + input);
                System.out.println("Write how many ml of milk you want to add:");
                input = scanner.nextInt();
                supplies.setMilk(supplies.getMilk() + input);
                System.out.println("Write how many grams of coffee beans you want to add:");
                input = scanner.nextInt();
                supplies.setBeans(supplies.getBeans() + input);
                System.out.println("Write how many disposable cups of coffee you want to add:");
                input = scanner.nextInt();
                supplies.setCups(supplies.getCups() + input);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public static void take(Supplies supplies) {
            System.out.printf("I gave you %d%n%n", supplies.getMoney());
            supplies.setMoney(0);
        }

        public static void stage3() {

            int water = -1;
            int milk = -1;
            int beans = -1;
            int cups = -1;
            int wCount = 0;
            int mCount = 0;
            int bCount = 0;
            int cCount = 0;

            Scanner scanner = new Scanner(System.in);
    //        System.out.println("Starting to make a coffee\nGrinding coffee beans\nBoiling water\nMixing boiled water with crushed coffee beans\nPouring coffee into the cup\nPouring some milk into the cup\nCoffee is ready!");
    //        System.out.println("Write how many cups of coffee you will need: ");
    //        cups = scanner.nextInt();
    //        System.out.printf("For %d cups of coffee you will need:%n" +
    //                "%d ml of water%n" +
    //                "%d ml of milk%n" +
    //                "%d g of coffee beans%n", cups, cups * 200, cups * 50, cups * 15);

            try {
                System.out.println("Write how many ml of water the coffee machine has:");
                water = scanner.nextInt();
                System.out.println("Write how many ml of milk the coffee machine has:");
                milk = scanner.nextInt();
                System.out.println("Write how many grams of coffee beans the coffee machine has:");
                beans = scanner.nextInt();
                System.out.println("Write how many cups of coffee you will need:");
                cups = scanner.nextInt();

                wCount = water / 200;
                mCount = milk / 50;
                bCount = beans / 15;

                cCount = wCount;
                if (mCount < wCount) {
                    cCount = mCount;
                } else if (bCount < mCount) {
                    cCount = bCount;
                }

                if (cCount == cups) {
                    System.out.println("Yes, I can make that amount of coffee");
                } else if (cCount < cups){
                    System.out.printf("No, I can only make %d cup(s) of coffee%n", cCount);
                } else if (cCount > cups) {
                    System.out.printf("Yes, I can make that amount of coffee (and even %d more than that)%n", cCount - cups);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public static class Supplies {
            private int water = 400;
            private int milk = 540;
            private int beans = 120;
            private int cups = 9;
            private int money = 550;

            public Supplies() {
            }

            public Supplies(int water, int milk, int beans, int cups, int money) {
                this.water = water;
                this.milk = milk;
                this.beans = beans;
                this.cups = cups;
                this.money = money;
            }

            public int getWater() {
                return water;
            }

            public void setWater(int water) {
                this.water = water;
            }

            public int getMilk() {
                return milk;
            }

            public void setMilk(int milk) {
                this.milk = milk;
            }

            public int getBeans() {
                return beans;
            }

            public void setBeans(int beans) {
                this.beans = beans;
            }

            public int getCups() {
                return cups;
            }

            public void setCups(int cups) {
                this.cups = cups;
            }

            public int getMoney() {
                return money;
            }

            public void setMoney(int money) {
                this.money = money;
            }

            @Override
            public String toString() {
                return "Supplies{" +
                        "water=" + water +
                        ", milk=" + milk +
                        ", beans=" + beans +
                        ", cups=" + cups +
                        ", money=" + money +
                        '}';
            }
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
record: 5
